// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ServerDBMS.capnp

#include "ServerDBMS.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<47> b_cb711ada46b974b8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    184, 116, 185,  70, 218,  26, 113, 203,
     17,   0,   0,   0,   3,   0,   0,   0,
      1, 206,  87, 161,  35, 252, 230, 234,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57,   0,   0,   0, 135,   0,   0,   0,
    141,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 101, 114, 118, 101, 114,  68,  66,
     77,  83,  46,  99,  97, 112, 110, 112,
     58,  82,  80,  67,  83, 101, 114, 118,
    101, 114,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
    229,  89, 100,  76, 194,  40, 112, 209,
      9,   0,   0,   0,  50,   0,   0,   0,
    183, 176, 218, 107,  82,  59, 239, 207,
      5,   0,   0,   0,  74,   0,   0,   0,
     84,  97,  98, 108, 101,   0,   0,   0,
     82, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    181, 188, 233, 153,  60, 177,  71, 207,
    220,  12,  98,  10, 100, 232, 166, 147,
     49,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    189, 235,  11,  39, 221, 148,  44, 188,
     49, 245, 135, 185, 125,  90,  54, 151,
     29,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   7,   0,   0,   0,
    115, 101, 110, 100,  81, 117, 101, 114,
    121,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 111, 110, 110, 101,  99, 116,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_cb711ada46b974b8 = b_cb711ada46b974b8.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cb711ada46b974b8[] = {
  &s_93a6e8640a620cdc,
  &s_97365a7db987f531,
  &s_bc2c94dd270bebbd,
  &s_cf47b13c99e9bcb5,
};
static const uint16_t m_cb711ada46b974b8[] = {1, 0};
const ::capnp::_::RawSchema s_cb711ada46b974b8 = {
  0xcb711ada46b974b8, b_cb711ada46b974b8.words, 47, d_cb711ada46b974b8, m_cb711ada46b974b8,
  4, 2, nullptr, nullptr, nullptr, { &s_cb711ada46b974b8, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<70> b_d17028c24c6459e5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    229,  89, 100,  76, 194,  40, 112, 209,
     27,   0,   0,   0,   1,   0,   0,   0,
    184, 116, 185,  70, 218,  26, 113, 203,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,  71,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 101, 114, 118, 101, 114,  68,  66,
     77,  83,  46,  99,  97, 112, 110, 112,
     58,  82,  80,  67,  83, 101, 114, 118,
    101, 114,  46,  84,  97,  98, 108, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   1,   0,   1,   0,
     62, 224,  47, 134, 179,  93,  63, 203,
     25,   0,   0,   0,  42,   0,   0,   0,
     53, 142, 116,  34, 254, 166, 113, 230,
     21,   0,   0,   0,  82,   0,   0,   0,
    118, 196, 162,  85,  74, 232,  12, 189,
     21,   0,   0,   0,  34,   0,   0,   0,
     49,  68, 207, 186,   8, 103, 150, 239,
     17,   0,   0,   0,  42,   0,   0,   0,
     77, 101, 116,  97,   0,   0,   0,   0,
     82, 101, 102, 101, 114, 101, 110,  99,
    101,   0,   0,   0,   0,   0,   0,   0,
     82, 111, 119,   0,   0,   0,   0,   0,
     67, 101, 108, 108,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     64,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     61,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     56,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
    109, 101, 116,  97,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     62, 224,  47, 134, 179,  93,  63, 203,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 101, 110, 116,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    118, 196, 162,  85,  74, 232,  12, 189,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d17028c24c6459e5 = b_d17028c24c6459e5.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d17028c24c6459e5[] = {
  &s_bd0ce84a55a2c476,
  &s_cb3f5db3862fe03e,
};
static const uint16_t m_d17028c24c6459e5[] = {1, 0};
static const uint16_t i_d17028c24c6459e5[] = {0, 1};
const ::capnp::_::RawSchema s_d17028c24c6459e5 = {
  0xd17028c24c6459e5, b_d17028c24c6459e5.words, 70, d_d17028c24c6459e5, m_d17028c24c6459e5,
  2, 2, i_d17028c24c6459e5, nullptr, nullptr, { &s_d17028c24c6459e5, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<112> b_cb3f5db3862fe03e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     62, 224,  47, 134, 179,  93,  63, 203,
     33,   0,   0,   0,   1,   0,   2,   0,
    229,  89, 100,  76, 194,  40, 112, 209,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  87,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 101, 114, 118, 101, 114,  68,  66,
     77,  83,  46,  99,  97, 112, 110, 112,
     58,  82,  80,  67,  83, 101, 114, 118,
    101, 114,  46,  84,  97,  98, 108, 101,
     46,  77, 101, 116,  97,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     24,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    148,   0,   0,   0,   3,   0,   1,   0,
    160,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    157,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    156,   0,   0,   0,   3,   0,   1,   0,
    168,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    160,   0,   0,   0,   3,   0,   1,   0,
    172,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    169,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    168,   0,   0,   0,   3,   0,   1,   0,
    180,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,  64,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    177,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    172,   0,   0,   0,   3,   0,   1,   0,
    184,   0,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,  65,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    181,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    180,   0,   0,   0,   3,   0,   1,   0,
    192,   0,   0,   0,   2,   0,   1,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  84, 121, 112, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    107, 101, 121,  84, 121, 112, 101,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 102, 101, 114, 101, 110,  99,
    101,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     53, 142, 116,  34, 254, 166, 113, 230,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 100, 101, 120,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 117, 108, 108,  97,  98, 108, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cb3f5db3862fe03e = b_cb3f5db3862fe03e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cb3f5db3862fe03e[] = {
  &s_e671a6fe22748e35,
};
static const uint16_t m_cb3f5db3862fe03e[] = {1, 4, 2, 0, 5, 3};
static const uint16_t i_cb3f5db3862fe03e[] = {0, 1, 2, 3, 4, 5};
const ::capnp::_::RawSchema s_cb3f5db3862fe03e = {
  0xcb3f5db3862fe03e, b_cb3f5db3862fe03e.words, 112, d_cb3f5db3862fe03e, m_cb3f5db3862fe03e,
  1, 6, i_cb3f5db3862fe03e, nullptr, nullptr, { &s_cb3f5db3862fe03e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<28> b_e671a6fe22748e35 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     53, 142, 116,  34, 254, 166, 113, 230,
     33,   0,   0,   0,   1,   0,   1,   0,
    229,  89, 100,  76, 194,  40, 112, 209,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 101, 114, 118, 101, 114,  68,  66,
     77,  83,  46,  99,  97, 112, 110, 112,
     58,  82,  80,  67,  83, 101, 114, 118,
    101, 114,  46,  84,  97,  98, 108, 101,
     46,  82, 101, 102, 101, 114, 101, 110,
     99, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    190,  13,   3,  75, 218,  70, 186, 241,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e671a6fe22748e35 = b_e671a6fe22748e35.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e671a6fe22748e35[] = {
  &s_f1ba46da4b030dbe,
};
static const uint16_t m_e671a6fe22748e35[] = {0};
static const uint16_t i_e671a6fe22748e35[] = {0};
const ::capnp::_::RawSchema s_e671a6fe22748e35 = {
  0xe671a6fe22748e35, b_e671a6fe22748e35.words, 28, d_e671a6fe22748e35, m_e671a6fe22748e35,
  1, 1, i_e671a6fe22748e35, nullptr, nullptr, { &s_e671a6fe22748e35, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_f1ba46da4b030dbe = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    190,  13,   3,  75, 218,  70, 186, 241,
     43,   0,   0,   0,   1,   0,   1,   0,
     53, 142, 116,  34, 254, 166, 113, 230,
      1,   0,   7,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 101, 114, 118, 101, 114,  68,  66,
     77,  83,  46,  99,  97, 112, 110, 112,
     58,  82,  80,  67,  83, 101, 114, 118,
    101, 114,  46,  84,  97,  98, 108, 101,
     46,  82, 101, 102, 101, 114, 101, 110,
     99, 101,  46, 100,  97, 116,  97,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    117, 110,  97, 114, 121,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,  97,  98, 108, 101,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f1ba46da4b030dbe = b_f1ba46da4b030dbe.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f1ba46da4b030dbe[] = {
  &s_e671a6fe22748e35,
};
static const uint16_t m_f1ba46da4b030dbe[] = {1, 0};
static const uint16_t i_f1ba46da4b030dbe[] = {0, 1};
const ::capnp::_::RawSchema s_f1ba46da4b030dbe = {
  0xf1ba46da4b030dbe, b_f1ba46da4b030dbe.words, 49, d_f1ba46da4b030dbe, m_f1ba46da4b030dbe,
  1, 2, i_f1ba46da4b030dbe, nullptr, nullptr, { &s_f1ba46da4b030dbe, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_bd0ce84a55a2c476 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    118, 196, 162,  85,  74, 232,  12, 189,
     33,   0,   0,   0,   1,   0,   0,   0,
    229,  89, 100,  76, 194,  40, 112, 209,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 101, 114, 118, 101, 114,  68,  66,
     77,  83,  46,  99,  97, 112, 110, 112,
     58,  82,  80,  67,  83, 101, 114, 118,
    101, 114,  46,  84,  97,  98, 108, 101,
     46,  82, 111, 119,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     49,  68, 207, 186,   8, 103, 150, 239,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bd0ce84a55a2c476 = b_bd0ce84a55a2c476.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bd0ce84a55a2c476[] = {
  &s_ef966708bacf4431,
};
static const uint16_t m_bd0ce84a55a2c476[] = {0};
static const uint16_t i_bd0ce84a55a2c476[] = {0};
const ::capnp::_::RawSchema s_bd0ce84a55a2c476 = {
  0xbd0ce84a55a2c476, b_bd0ce84a55a2c476.words, 38, d_bd0ce84a55a2c476, m_bd0ce84a55a2c476,
  1, 1, i_bd0ce84a55a2c476, nullptr, nullptr, { &s_bd0ce84a55a2c476, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<27> b_ef966708bacf4431 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     49,  68, 207, 186,   8, 103, 150, 239,
     33,   0,   0,   0,   1,   0,   2,   0,
    229,  89, 100,  76, 194,  40, 112, 209,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 101, 114, 118, 101, 114,  68,  66,
     77,  83,  46,  99,  97, 112, 110, 112,
     58,  82,  80,  67,  83, 101, 114, 118,
    101, 114,  46,  84,  97,  98, 108, 101,
     46,  67, 101, 108, 108,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    157, 120, 186, 208, 192, 199,  42, 170,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ef966708bacf4431 = b_ef966708bacf4431.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ef966708bacf4431[] = {
  &s_aa2ac7c0d0ba789d,
};
static const uint16_t m_ef966708bacf4431[] = {0};
static const uint16_t i_ef966708bacf4431[] = {0};
const ::capnp::_::RawSchema s_ef966708bacf4431 = {
  0xef966708bacf4431, b_ef966708bacf4431.words, 27, d_ef966708bacf4431, m_ef966708bacf4431,
  1, 1, i_ef966708bacf4431, nullptr, nullptr, { &s_ef966708bacf4431, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<94> b_aa2ac7c0d0ba789d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    157, 120, 186, 208, 192, 199,  42, 170,
     38,   0,   0,   0,   1,   0,   2,   0,
     49,  68, 207, 186,   8, 103, 150, 239,
      1,   0,   7,   0,   1,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 101, 114, 118, 101, 114,  68,  66,
     77,  83,  46,  99,  97, 112, 110, 112,
     58,  82,  80,  67,  83, 101, 114, 118,
    101, 114,  46,  84,  97,  98, 108, 101,
     46,  67, 101, 108, 108,  46, 100,  97,
    116,  97,   0,   0,   0,   0,   0,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,  16,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
      3,   0, 252, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    144,   0,   0,   0,   2,   0,   1,   0,
      4,   0, 251, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   0,   0,   0,   3,   0,   1,   0,
    148,   0,   0,   0,   2,   0,   1,   0,
    117, 110,  97, 114, 121,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 105, 110,  97, 114, 121,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 104, 111, 114, 116,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108, 111, 110, 103,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 120, 116,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_aa2ac7c0d0ba789d = b_aa2ac7c0d0ba789d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_aa2ac7c0d0ba789d[] = {
  &s_ef966708bacf4431,
};
static const uint16_t m_aa2ac7c0d0ba789d[] = {1, 3, 2, 4, 0};
static const uint16_t i_aa2ac7c0d0ba789d[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_aa2ac7c0d0ba789d = {
  0xaa2ac7c0d0ba789d, b_aa2ac7c0d0ba789d.words, 94, d_aa2ac7c0d0ba789d, m_aa2ac7c0d0ba789d,
  1, 5, i_aa2ac7c0d0ba789d, nullptr, nullptr, { &s_aa2ac7c0d0ba789d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<27> b_cfef3b526bdab0b7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    183, 176, 218, 107,  82,  59, 239, 207,
     27,   0,   0,   0,   1,   0,   1,   0,
    184, 116, 185,  70, 218,  26, 113, 203,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 101, 114, 118, 101, 114,  68,  66,
     77,  83,  46,  99,  97, 112, 110, 112,
     58,  82,  80,  67,  83, 101, 114, 118,
    101, 114,  46,  82, 101, 115, 112, 111,
    110, 115, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    186,   2, 182,  55, 208, 147, 151, 211,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cfef3b526bdab0b7 = b_cfef3b526bdab0b7.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cfef3b526bdab0b7[] = {
  &s_d39793d037b602ba,
};
static const uint16_t m_cfef3b526bdab0b7[] = {0};
static const uint16_t i_cfef3b526bdab0b7[] = {0};
const ::capnp::_::RawSchema s_cfef3b526bdab0b7 = {
  0xcfef3b526bdab0b7, b_cfef3b526bdab0b7.words, 27, d_cfef3b526bdab0b7, m_cfef3b526bdab0b7,
  1, 1, i_cfef3b526bdab0b7, nullptr, nullptr, { &s_cfef3b526bdab0b7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_d39793d037b602ba = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    186,   2, 182,  55, 208, 147, 151, 211,
     36,   0,   0,   0,   1,   0,   1,   0,
    183, 176, 218, 107,  82,  59, 239, 207,
      1,   0,   7,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 101, 114, 118, 101, 114,  68,  66,
     77,  83,  46,  99,  97, 112, 110, 112,
     58,  82,  80,  67,  83, 101, 114, 118,
    101, 114,  46,  82, 101, 115, 112, 111,
    110, 115, 101,  46, 100,  97, 116,  97,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    118, 111, 105, 100,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,  97,  98, 108, 101,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    229,  89, 100,  76, 194,  40, 112, 209,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d39793d037b602ba = b_d39793d037b602ba.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d39793d037b602ba[] = {
  &s_cfef3b526bdab0b7,
  &s_d17028c24c6459e5,
};
static const uint16_t m_d39793d037b602ba[] = {1, 0};
static const uint16_t i_d39793d037b602ba[] = {0, 1};
const ::capnp::_::RawSchema s_d39793d037b602ba = {
  0xd39793d037b602ba, b_d39793d037b602ba.words, 49, d_d39793d037b602ba, m_d39793d037b602ba,
  2, 2, i_d39793d037b602ba, nullptr, nullptr, { &s_d39793d037b602ba, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_cf47b13c99e9bcb5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    181, 188, 233, 153,  60, 177,  71, 207,
     27,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 101, 114, 118, 101, 114,  68,  66,
     77,  83,  46,  99,  97, 112, 110, 112,
     58,  82,  80,  67,  83, 101, 114, 118,
    101, 114,  46, 115, 101, 110, 100,  81,
    117, 101, 114, 121,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    113, 117, 101, 114, 121,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cf47b13c99e9bcb5 = b_cf47b13c99e9bcb5.words;
#if !CAPNP_LITE
static const uint16_t m_cf47b13c99e9bcb5[] = {0};
static const uint16_t i_cf47b13c99e9bcb5[] = {0};
const ::capnp::_::RawSchema s_cf47b13c99e9bcb5 = {
  0xcf47b13c99e9bcb5, b_cf47b13c99e9bcb5.words, 34, nullptr, m_cf47b13c99e9bcb5,
  0, 1, i_cf47b13c99e9bcb5, nullptr, nullptr, { &s_cf47b13c99e9bcb5, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_93a6e8640a620cdc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    220,  12,  98,  10, 100, 232, 166, 147,
     27,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 101, 114, 118, 101, 114,  68,  66,
     77,  83,  46,  99,  97, 112, 110, 112,
     58,  82,  80,  67,  83, 101, 114, 118,
    101, 114,  46, 115, 101, 110, 100,  81,
    117, 101, 114, 121,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    183, 176, 218, 107,  82,  59, 239, 207,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_93a6e8640a620cdc = b_93a6e8640a620cdc.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_93a6e8640a620cdc[] = {
  &s_cfef3b526bdab0b7,
};
static const uint16_t m_93a6e8640a620cdc[] = {0};
static const uint16_t i_93a6e8640a620cdc[] = {0};
const ::capnp::_::RawSchema s_93a6e8640a620cdc = {
  0x93a6e8640a620cdc, b_93a6e8640a620cdc.words, 35, d_93a6e8640a620cdc, m_93a6e8640a620cdc,
  1, 1, i_93a6e8640a620cdc, nullptr, nullptr, { &s_93a6e8640a620cdc, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_bc2c94dd270bebbd = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    189, 235,  11,  39, 221, 148,  44, 188,
     27,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 101, 114, 118, 101, 114,  68,  66,
     77,  83,  46,  99,  97, 112, 110, 112,
     58,  82,  80,  67,  83, 101, 114, 118,
    101, 114,  46,  99, 111, 110, 110, 101,
     99, 116,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bc2c94dd270bebbd = b_bc2c94dd270bebbd.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_bc2c94dd270bebbd = {
  0xbc2c94dd270bebbd, b_bc2c94dd270bebbd.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_bc2c94dd270bebbd, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_97365a7db987f531 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     49, 245, 135, 185, 125,  90,  54, 151,
     27,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 101, 114, 118, 101, 114,  68,  66,
     77,  83,  46,  99,  97, 112, 110, 112,
     58,  82,  80,  67,  83, 101, 114, 118,
    101, 114,  46,  99, 111, 110, 110, 101,
     99, 116,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_97365a7db987f531 = b_97365a7db987f531.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_97365a7db987f531 = {
  0x97365a7db987f531, b_97365a7db987f531.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_97365a7db987f531, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::RPCServer::SendQueryParams,  ::RPCServer::SendQueryResults>
RPCServer::Client::sendQueryRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::RPCServer::SendQueryParams,  ::RPCServer::SendQueryResults>(
      0xcb711ada46b974b8ull, 0, sizeHint);
}
::kj::Promise<void> RPCServer::Server::sendQuery(SendQueryContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ServerDBMS.capnp:RPCServer", "sendQuery",
      0xcb711ada46b974b8ull, 0);
}
::capnp::Request< ::RPCServer::ConnectParams,  ::RPCServer::ConnectResults>
RPCServer::Client::connectRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::RPCServer::ConnectParams,  ::RPCServer::ConnectResults>(
      0xcb711ada46b974b8ull, 1, sizeHint);
}
::kj::Promise<void> RPCServer::Server::connect(ConnectContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ServerDBMS.capnp:RPCServer", "connect",
      0xcb711ada46b974b8ull, 1);
}
::kj::Promise<void> RPCServer::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xcb711ada46b974b8ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("ServerDBMS.capnp:RPCServer", interfaceId);
  }
}
::kj::Promise<void> RPCServer::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return sendQuery(::capnp::Capability::Server::internalGetTypedContext<
           ::RPCServer::SendQueryParams,  ::RPCServer::SendQueryResults>(context));
    case 1:
      return connect(::capnp::Capability::Server::internalGetTypedContext<
           ::RPCServer::ConnectParams,  ::RPCServer::ConnectResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "ServerDBMS.capnp:RPCServer",
          0xcb711ada46b974b8ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// RPCServer
#if !CAPNP_LITE
constexpr ::capnp::Kind RPCServer::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RPCServer::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// RPCServer::Table
constexpr uint16_t RPCServer::Table::_capnpPrivate::dataWordSize;
constexpr uint16_t RPCServer::Table::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind RPCServer::Table::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RPCServer::Table::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// RPCServer::Table::Meta
constexpr uint16_t RPCServer::Table::Meta::_capnpPrivate::dataWordSize;
constexpr uint16_t RPCServer::Table::Meta::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind RPCServer::Table::Meta::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RPCServer::Table::Meta::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// RPCServer::Table::Reference
constexpr uint16_t RPCServer::Table::Reference::_capnpPrivate::dataWordSize;
constexpr uint16_t RPCServer::Table::Reference::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind RPCServer::Table::Reference::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RPCServer::Table::Reference::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// RPCServer::Table::Reference::Data
constexpr uint16_t RPCServer::Table::Reference::Data::_capnpPrivate::dataWordSize;
constexpr uint16_t RPCServer::Table::Reference::Data::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind RPCServer::Table::Reference::Data::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RPCServer::Table::Reference::Data::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// RPCServer::Table::Row
constexpr uint16_t RPCServer::Table::Row::_capnpPrivate::dataWordSize;
constexpr uint16_t RPCServer::Table::Row::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind RPCServer::Table::Row::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RPCServer::Table::Row::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// RPCServer::Table::Cell
constexpr uint16_t RPCServer::Table::Cell::_capnpPrivate::dataWordSize;
constexpr uint16_t RPCServer::Table::Cell::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind RPCServer::Table::Cell::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RPCServer::Table::Cell::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// RPCServer::Table::Cell::Data
constexpr uint16_t RPCServer::Table::Cell::Data::_capnpPrivate::dataWordSize;
constexpr uint16_t RPCServer::Table::Cell::Data::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind RPCServer::Table::Cell::Data::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RPCServer::Table::Cell::Data::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// RPCServer::Response
constexpr uint16_t RPCServer::Response::_capnpPrivate::dataWordSize;
constexpr uint16_t RPCServer::Response::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind RPCServer::Response::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RPCServer::Response::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// RPCServer::Response::Data
constexpr uint16_t RPCServer::Response::Data::_capnpPrivate::dataWordSize;
constexpr uint16_t RPCServer::Response::Data::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind RPCServer::Response::Data::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RPCServer::Response::Data::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// RPCServer::SendQueryParams
constexpr uint16_t RPCServer::SendQueryParams::_capnpPrivate::dataWordSize;
constexpr uint16_t RPCServer::SendQueryParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind RPCServer::SendQueryParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RPCServer::SendQueryParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// RPCServer::SendQueryResults
constexpr uint16_t RPCServer::SendQueryResults::_capnpPrivate::dataWordSize;
constexpr uint16_t RPCServer::SendQueryResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind RPCServer::SendQueryResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RPCServer::SendQueryResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// RPCServer::ConnectParams
constexpr uint16_t RPCServer::ConnectParams::_capnpPrivate::dataWordSize;
constexpr uint16_t RPCServer::ConnectParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind RPCServer::ConnectParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RPCServer::ConnectParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// RPCServer::ConnectResults
constexpr uint16_t RPCServer::ConnectResults::_capnpPrivate::dataWordSize;
constexpr uint16_t RPCServer::ConnectResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind RPCServer::ConnectResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RPCServer::ConnectResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



