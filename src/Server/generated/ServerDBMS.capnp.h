// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ServerDBMS.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 7000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(cb711ada46b974b8);
CAPNP_DECLARE_SCHEMA(d17028c24c6459e5);
CAPNP_DECLARE_SCHEMA(cb3f5db3862fe03e);
CAPNP_DECLARE_SCHEMA(e671a6fe22748e35);
CAPNP_DECLARE_SCHEMA(f1ba46da4b030dbe);
CAPNP_DECLARE_SCHEMA(bd0ce84a55a2c476);
CAPNP_DECLARE_SCHEMA(ef966708bacf4431);
CAPNP_DECLARE_SCHEMA(aa2ac7c0d0ba789d);
CAPNP_DECLARE_SCHEMA(cfef3b526bdab0b7);
CAPNP_DECLARE_SCHEMA(d39793d037b602ba);
CAPNP_DECLARE_SCHEMA(cf47b13c99e9bcb5);
CAPNP_DECLARE_SCHEMA(93a6e8640a620cdc);
CAPNP_DECLARE_SCHEMA(bc2c94dd270bebbd);
CAPNP_DECLARE_SCHEMA(97365a7db987f531);

}  // namespace schemas
}  // namespace capnp


struct RPCServer {
  RPCServer() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct Table;
  struct Response;
  struct SendQueryParams;
  struct SendQueryResults;
  struct ConnectParams;
  struct ConnectResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(cb711ada46b974b8)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct RPCServer::Table {
  Table() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Meta;
  struct Reference;
  struct Row;
  struct Cell;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d17028c24c6459e5, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RPCServer::Table::Meta {
  Meta() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cb3f5db3862fe03e, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RPCServer::Table::Reference {
  Reference() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Data;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e671a6fe22748e35, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RPCServer::Table::Reference::Data {
  Data() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    UNARY,
    TABLE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f1ba46da4b030dbe, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RPCServer::Table::Row {
  Row() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd0ce84a55a2c476, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RPCServer::Table::Cell {
  Cell() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Data;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ef966708bacf4431, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RPCServer::Table::Cell::Data {
  Data() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    UNARY,
    BINARY,
    SHORT,
    LONG,
    TEXT,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aa2ac7c0d0ba789d, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RPCServer::Response {
  Response() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Data;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cfef3b526bdab0b7, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RPCServer::Response::Data {
  Data() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    VOID,
    TABLE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d39793d037b602ba, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RPCServer::SendQueryParams {
  SendQueryParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cf47b13c99e9bcb5, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RPCServer::SendQueryResults {
  SendQueryResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(93a6e8640a620cdc, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RPCServer::ConnectParams {
  ConnectParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc2c94dd270bebbd, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RPCServer::ConnectResults {
  ConnectResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(97365a7db987f531, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

#if !CAPNP_LITE
class RPCServer::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef RPCServer Calls;
  typedef RPCServer Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::RPCServer::SendQueryParams,  ::RPCServer::SendQueryResults> sendQueryRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::RPCServer::ConnectParams,  ::RPCServer::ConnectResults> connectRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class RPCServer::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef RPCServer Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::RPCServer::SendQueryParams SendQueryParams;
  typedef  ::RPCServer::SendQueryResults SendQueryResults;
  typedef ::capnp::CallContext<SendQueryParams, SendQueryResults> SendQueryContext;
  virtual ::kj::Promise<void> sendQuery(SendQueryContext context);
  typedef  ::RPCServer::ConnectParams ConnectParams;
  typedef  ::RPCServer::ConnectResults ConnectResults;
  typedef ::capnp::CallContext<ConnectParams, ConnectResults> ConnectContext;
  virtual ::kj::Promise<void> connect(ConnectContext context);

  inline  ::RPCServer::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::RPCServer>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class RPCServer::Table::Reader {
public:
  typedef Table Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMeta() const;
  inline  ::capnp::List< ::RPCServer::Table::Meta,  ::capnp::Kind::STRUCT>::Reader getMeta() const;

  inline bool hasContent() const;
  inline  ::capnp::List< ::RPCServer::Table::Row,  ::capnp::Kind::STRUCT>::Reader getContent() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RPCServer::Table::Builder {
public:
  typedef Table Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMeta();
  inline  ::capnp::List< ::RPCServer::Table::Meta,  ::capnp::Kind::STRUCT>::Builder getMeta();
  inline void setMeta( ::capnp::List< ::RPCServer::Table::Meta,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::RPCServer::Table::Meta,  ::capnp::Kind::STRUCT>::Builder initMeta(unsigned int size);
  inline void adoptMeta(::capnp::Orphan< ::capnp::List< ::RPCServer::Table::Meta,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::RPCServer::Table::Meta,  ::capnp::Kind::STRUCT>> disownMeta();

  inline bool hasContent();
  inline  ::capnp::List< ::RPCServer::Table::Row,  ::capnp::Kind::STRUCT>::Builder getContent();
  inline void setContent( ::capnp::List< ::RPCServer::Table::Row,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::RPCServer::Table::Row,  ::capnp::Kind::STRUCT>::Builder initContent(unsigned int size);
  inline void adoptContent(::capnp::Orphan< ::capnp::List< ::RPCServer::Table::Row,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::RPCServer::Table::Row,  ::capnp::Kind::STRUCT>> disownContent();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RPCServer::Table::Pipeline {
public:
  typedef Table Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RPCServer::Table::Meta::Reader {
public:
  typedef Meta Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::uint32_t getDataType() const;

  inline  ::uint32_t getKeyType() const;

  inline bool hasReference() const;
  inline  ::RPCServer::Table::Reference::Reader getReference() const;

  inline bool getIndex() const;

  inline bool getNullable() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RPCServer::Table::Meta::Builder {
public:
  typedef Meta Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::uint32_t getDataType();
  inline void setDataType( ::uint32_t value);

  inline  ::uint32_t getKeyType();
  inline void setKeyType( ::uint32_t value);

  inline bool hasReference();
  inline  ::RPCServer::Table::Reference::Builder getReference();
  inline void setReference( ::RPCServer::Table::Reference::Reader value);
  inline  ::RPCServer::Table::Reference::Builder initReference();
  inline void adoptReference(::capnp::Orphan< ::RPCServer::Table::Reference>&& value);
  inline ::capnp::Orphan< ::RPCServer::Table::Reference> disownReference();

  inline bool getIndex();
  inline void setIndex(bool value);

  inline bool getNullable();
  inline void setNullable(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RPCServer::Table::Meta::Pipeline {
public:
  typedef Meta Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::RPCServer::Table::Reference::Pipeline getReference();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RPCServer::Table::Reference::Reader {
public:
  typedef Reference Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline typename Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RPCServer::Table::Reference::Builder {
public:
  typedef Reference Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline typename Data::Builder getData();
  inline typename Data::Builder initData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RPCServer::Table::Reference::Pipeline {
public:
  typedef Reference Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Data::Pipeline getData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RPCServer::Table::Reference::Data::Reader {
public:
  typedef Data Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isUnary() const;
  inline  ::capnp::Void getUnary() const;

  inline bool isTable() const;
  inline bool hasTable() const;
  inline  ::capnp::Text::Reader getTable() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RPCServer::Table::Reference::Data::Builder {
public:
  typedef Data Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isUnary();
  inline  ::capnp::Void getUnary();
  inline void setUnary( ::capnp::Void value = ::capnp::VOID);

  inline bool isTable();
  inline bool hasTable();
  inline  ::capnp::Text::Builder getTable();
  inline void setTable( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTable(unsigned int size);
  inline void adoptTable(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTable();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RPCServer::Table::Reference::Data::Pipeline {
public:
  typedef Data Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RPCServer::Table::Row::Reader {
public:
  typedef Row Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasData() const;
  inline  ::capnp::List< ::RPCServer::Table::Cell,  ::capnp::Kind::STRUCT>::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RPCServer::Table::Row::Builder {
public:
  typedef Row Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasData();
  inline  ::capnp::List< ::RPCServer::Table::Cell,  ::capnp::Kind::STRUCT>::Builder getData();
  inline void setData( ::capnp::List< ::RPCServer::Table::Cell,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::RPCServer::Table::Cell,  ::capnp::Kind::STRUCT>::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::List< ::RPCServer::Table::Cell,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::RPCServer::Table::Cell,  ::capnp::Kind::STRUCT>> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RPCServer::Table::Row::Pipeline {
public:
  typedef Row Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RPCServer::Table::Cell::Reader {
public:
  typedef Cell Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline typename Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RPCServer::Table::Cell::Builder {
public:
  typedef Cell Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline typename Data::Builder getData();
  inline typename Data::Builder initData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RPCServer::Table::Cell::Pipeline {
public:
  typedef Cell Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Data::Pipeline getData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RPCServer::Table::Cell::Data::Reader {
public:
  typedef Data Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isUnary() const;
  inline  ::capnp::Void getUnary() const;

  inline bool isBinary() const;
  inline bool getBinary() const;

  inline bool isShort() const;
  inline  ::uint32_t getShort() const;

  inline bool isLong() const;
  inline  ::uint64_t getLong() const;

  inline bool isText() const;
  inline bool hasText() const;
  inline  ::capnp::Text::Reader getText() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RPCServer::Table::Cell::Data::Builder {
public:
  typedef Data Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isUnary();
  inline  ::capnp::Void getUnary();
  inline void setUnary( ::capnp::Void value = ::capnp::VOID);

  inline bool isBinary();
  inline bool getBinary();
  inline void setBinary(bool value);

  inline bool isShort();
  inline  ::uint32_t getShort();
  inline void setShort( ::uint32_t value);

  inline bool isLong();
  inline  ::uint64_t getLong();
  inline void setLong( ::uint64_t value);

  inline bool isText();
  inline bool hasText();
  inline  ::capnp::Text::Builder getText();
  inline void setText( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initText(unsigned int size);
  inline void adoptText(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownText();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RPCServer::Table::Cell::Data::Pipeline {
public:
  typedef Data Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RPCServer::Response::Reader {
public:
  typedef Response Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline typename Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RPCServer::Response::Builder {
public:
  typedef Response Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline typename Data::Builder getData();
  inline typename Data::Builder initData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RPCServer::Response::Pipeline {
public:
  typedef Response Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Data::Pipeline getData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RPCServer::Response::Data::Reader {
public:
  typedef Data Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isVoid() const;
  inline  ::capnp::Void getVoid() const;

  inline bool isTable() const;
  inline bool hasTable() const;
  inline  ::RPCServer::Table::Reader getTable() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RPCServer::Response::Data::Builder {
public:
  typedef Data Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isVoid();
  inline  ::capnp::Void getVoid();
  inline void setVoid( ::capnp::Void value = ::capnp::VOID);

  inline bool isTable();
  inline bool hasTable();
  inline  ::RPCServer::Table::Builder getTable();
  inline void setTable( ::RPCServer::Table::Reader value);
  inline  ::RPCServer::Table::Builder initTable();
  inline void adoptTable(::capnp::Orphan< ::RPCServer::Table>&& value);
  inline ::capnp::Orphan< ::RPCServer::Table> disownTable();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RPCServer::Response::Data::Pipeline {
public:
  typedef Data Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RPCServer::SendQueryParams::Reader {
public:
  typedef SendQueryParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasQuery() const;
  inline  ::capnp::Text::Reader getQuery() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RPCServer::SendQueryParams::Builder {
public:
  typedef SendQueryParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasQuery();
  inline  ::capnp::Text::Builder getQuery();
  inline void setQuery( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initQuery(unsigned int size);
  inline void adoptQuery(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownQuery();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RPCServer::SendQueryParams::Pipeline {
public:
  typedef SendQueryParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RPCServer::SendQueryResults::Reader {
public:
  typedef SendQueryResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasResponse() const;
  inline  ::RPCServer::Response::Reader getResponse() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RPCServer::SendQueryResults::Builder {
public:
  typedef SendQueryResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasResponse();
  inline  ::RPCServer::Response::Builder getResponse();
  inline void setResponse( ::RPCServer::Response::Reader value);
  inline  ::RPCServer::Response::Builder initResponse();
  inline void adoptResponse(::capnp::Orphan< ::RPCServer::Response>&& value);
  inline ::capnp::Orphan< ::RPCServer::Response> disownResponse();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RPCServer::SendQueryResults::Pipeline {
public:
  typedef SendQueryResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::RPCServer::Response::Pipeline getResponse();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RPCServer::ConnectParams::Reader {
public:
  typedef ConnectParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RPCServer::ConnectParams::Builder {
public:
  typedef ConnectParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RPCServer::ConnectParams::Pipeline {
public:
  typedef ConnectParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RPCServer::ConnectResults::Reader {
public:
  typedef ConnectResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RPCServer::ConnectResults::Builder {
public:
  typedef ConnectResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RPCServer::ConnectResults::Pipeline {
public:
  typedef ConnectResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

#if !CAPNP_LITE
inline RPCServer::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline RPCServer::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline RPCServer::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline RPCServer::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline RPCServer::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::RPCServer::Client& RPCServer::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::RPCServer::Client& RPCServer::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool RPCServer::Table::Reader::hasMeta() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RPCServer::Table::Builder::hasMeta() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::RPCServer::Table::Meta,  ::capnp::Kind::STRUCT>::Reader RPCServer::Table::Reader::getMeta() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RPCServer::Table::Meta,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::RPCServer::Table::Meta,  ::capnp::Kind::STRUCT>::Builder RPCServer::Table::Builder::getMeta() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RPCServer::Table::Meta,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RPCServer::Table::Builder::setMeta( ::capnp::List< ::RPCServer::Table::Meta,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::RPCServer::Table::Meta,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::RPCServer::Table::Meta,  ::capnp::Kind::STRUCT>::Builder RPCServer::Table::Builder::initMeta(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RPCServer::Table::Meta,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RPCServer::Table::Builder::adoptMeta(
    ::capnp::Orphan< ::capnp::List< ::RPCServer::Table::Meta,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::RPCServer::Table::Meta,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::RPCServer::Table::Meta,  ::capnp::Kind::STRUCT>> RPCServer::Table::Builder::disownMeta() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RPCServer::Table::Meta,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RPCServer::Table::Reader::hasContent() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RPCServer::Table::Builder::hasContent() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::RPCServer::Table::Row,  ::capnp::Kind::STRUCT>::Reader RPCServer::Table::Reader::getContent() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RPCServer::Table::Row,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::RPCServer::Table::Row,  ::capnp::Kind::STRUCT>::Builder RPCServer::Table::Builder::getContent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RPCServer::Table::Row,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RPCServer::Table::Builder::setContent( ::capnp::List< ::RPCServer::Table::Row,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::RPCServer::Table::Row,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::RPCServer::Table::Row,  ::capnp::Kind::STRUCT>::Builder RPCServer::Table::Builder::initContent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RPCServer::Table::Row,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RPCServer::Table::Builder::adoptContent(
    ::capnp::Orphan< ::capnp::List< ::RPCServer::Table::Row,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::RPCServer::Table::Row,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::RPCServer::Table::Row,  ::capnp::Kind::STRUCT>> RPCServer::Table::Builder::disownContent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RPCServer::Table::Row,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RPCServer::Table::Meta::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RPCServer::Table::Meta::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RPCServer::Table::Meta::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RPCServer::Table::Meta::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RPCServer::Table::Meta::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RPCServer::Table::Meta::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RPCServer::Table::Meta::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RPCServer::Table::Meta::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t RPCServer::Table::Meta::Reader::getDataType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t RPCServer::Table::Meta::Builder::getDataType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RPCServer::Table::Meta::Builder::setDataType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t RPCServer::Table::Meta::Reader::getKeyType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t RPCServer::Table::Meta::Builder::getKeyType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RPCServer::Table::Meta::Builder::setKeyType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool RPCServer::Table::Meta::Reader::hasReference() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RPCServer::Table::Meta::Builder::hasReference() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::RPCServer::Table::Reference::Reader RPCServer::Table::Meta::Reader::getReference() const {
  return ::capnp::_::PointerHelpers< ::RPCServer::Table::Reference>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::RPCServer::Table::Reference::Builder RPCServer::Table::Meta::Builder::getReference() {
  return ::capnp::_::PointerHelpers< ::RPCServer::Table::Reference>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::RPCServer::Table::Reference::Pipeline RPCServer::Table::Meta::Pipeline::getReference() {
  return  ::RPCServer::Table::Reference::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void RPCServer::Table::Meta::Builder::setReference( ::RPCServer::Table::Reference::Reader value) {
  ::capnp::_::PointerHelpers< ::RPCServer::Table::Reference>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::RPCServer::Table::Reference::Builder RPCServer::Table::Meta::Builder::initReference() {
  return ::capnp::_::PointerHelpers< ::RPCServer::Table::Reference>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RPCServer::Table::Meta::Builder::adoptReference(
    ::capnp::Orphan< ::RPCServer::Table::Reference>&& value) {
  ::capnp::_::PointerHelpers< ::RPCServer::Table::Reference>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::RPCServer::Table::Reference> RPCServer::Table::Meta::Builder::disownReference() {
  return ::capnp::_::PointerHelpers< ::RPCServer::Table::Reference>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RPCServer::Table::Meta::Reader::getIndex() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool RPCServer::Table::Meta::Builder::getIndex() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void RPCServer::Table::Meta::Builder::setIndex(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool RPCServer::Table::Meta::Reader::getNullable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline bool RPCServer::Table::Meta::Builder::getNullable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void RPCServer::Table::Meta::Builder::setNullable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline typename RPCServer::Table::Reference::Data::Reader RPCServer::Table::Reference::Reader::getData() const {
  return typename RPCServer::Table::Reference::Data::Reader(_reader);
}
inline typename RPCServer::Table::Reference::Data::Builder RPCServer::Table::Reference::Builder::getData() {
  return typename RPCServer::Table::Reference::Data::Builder(_builder);
}
#if !CAPNP_LITE
inline typename RPCServer::Table::Reference::Data::Pipeline RPCServer::Table::Reference::Pipeline::getData() {
  return typename RPCServer::Table::Reference::Data::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename RPCServer::Table::Reference::Data::Builder RPCServer::Table::Reference::Builder::initData() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  return typename RPCServer::Table::Reference::Data::Builder(_builder);
}
inline  ::RPCServer::Table::Reference::Data::Which RPCServer::Table::Reference::Data::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::RPCServer::Table::Reference::Data::Which RPCServer::Table::Reference::Data::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool RPCServer::Table::Reference::Data::Reader::isUnary() const {
  return which() == RPCServer::Table::Reference::Data::UNARY;
}
inline bool RPCServer::Table::Reference::Data::Builder::isUnary() {
  return which() == RPCServer::Table::Reference::Data::UNARY;
}
inline  ::capnp::Void RPCServer::Table::Reference::Data::Reader::getUnary() const {
  KJ_IREQUIRE((which() == RPCServer::Table::Reference::Data::UNARY),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void RPCServer::Table::Reference::Data::Builder::getUnary() {
  KJ_IREQUIRE((which() == RPCServer::Table::Reference::Data::UNARY),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RPCServer::Table::Reference::Data::Builder::setUnary( ::capnp::Void value) {
  _builder.setDataField<RPCServer::Table::Reference::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RPCServer::Table::Reference::Data::UNARY);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RPCServer::Table::Reference::Data::Reader::isTable() const {
  return which() == RPCServer::Table::Reference::Data::TABLE;
}
inline bool RPCServer::Table::Reference::Data::Builder::isTable() {
  return which() == RPCServer::Table::Reference::Data::TABLE;
}
inline bool RPCServer::Table::Reference::Data::Reader::hasTable() const {
  if (which() != RPCServer::Table::Reference::Data::TABLE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RPCServer::Table::Reference::Data::Builder::hasTable() {
  if (which() != RPCServer::Table::Reference::Data::TABLE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RPCServer::Table::Reference::Data::Reader::getTable() const {
  KJ_IREQUIRE((which() == RPCServer::Table::Reference::Data::TABLE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RPCServer::Table::Reference::Data::Builder::getTable() {
  KJ_IREQUIRE((which() == RPCServer::Table::Reference::Data::TABLE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RPCServer::Table::Reference::Data::Builder::setTable( ::capnp::Text::Reader value) {
  _builder.setDataField<RPCServer::Table::Reference::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RPCServer::Table::Reference::Data::TABLE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RPCServer::Table::Reference::Data::Builder::initTable(unsigned int size) {
  _builder.setDataField<RPCServer::Table::Reference::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RPCServer::Table::Reference::Data::TABLE);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RPCServer::Table::Reference::Data::Builder::adoptTable(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<RPCServer::Table::Reference::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RPCServer::Table::Reference::Data::TABLE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RPCServer::Table::Reference::Data::Builder::disownTable() {
  KJ_IREQUIRE((which() == RPCServer::Table::Reference::Data::TABLE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RPCServer::Table::Row::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RPCServer::Table::Row::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::RPCServer::Table::Cell,  ::capnp::Kind::STRUCT>::Reader RPCServer::Table::Row::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RPCServer::Table::Cell,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::RPCServer::Table::Cell,  ::capnp::Kind::STRUCT>::Builder RPCServer::Table::Row::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RPCServer::Table::Cell,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RPCServer::Table::Row::Builder::setData( ::capnp::List< ::RPCServer::Table::Cell,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::RPCServer::Table::Cell,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::RPCServer::Table::Cell,  ::capnp::Kind::STRUCT>::Builder RPCServer::Table::Row::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RPCServer::Table::Cell,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RPCServer::Table::Row::Builder::adoptData(
    ::capnp::Orphan< ::capnp::List< ::RPCServer::Table::Cell,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::RPCServer::Table::Cell,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::RPCServer::Table::Cell,  ::capnp::Kind::STRUCT>> RPCServer::Table::Row::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RPCServer::Table::Cell,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline typename RPCServer::Table::Cell::Data::Reader RPCServer::Table::Cell::Reader::getData() const {
  return typename RPCServer::Table::Cell::Data::Reader(_reader);
}
inline typename RPCServer::Table::Cell::Data::Builder RPCServer::Table::Cell::Builder::getData() {
  return typename RPCServer::Table::Cell::Data::Builder(_builder);
}
#if !CAPNP_LITE
inline typename RPCServer::Table::Cell::Data::Pipeline RPCServer::Table::Cell::Pipeline::getData() {
  return typename RPCServer::Table::Cell::Data::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename RPCServer::Table::Cell::Data::Builder RPCServer::Table::Cell::Builder::initData() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField<bool>(::capnp::bounded<16>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  return typename RPCServer::Table::Cell::Data::Builder(_builder);
}
inline  ::RPCServer::Table::Cell::Data::Which RPCServer::Table::Cell::Data::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::RPCServer::Table::Cell::Data::Which RPCServer::Table::Cell::Data::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool RPCServer::Table::Cell::Data::Reader::isUnary() const {
  return which() == RPCServer::Table::Cell::Data::UNARY;
}
inline bool RPCServer::Table::Cell::Data::Builder::isUnary() {
  return which() == RPCServer::Table::Cell::Data::UNARY;
}
inline  ::capnp::Void RPCServer::Table::Cell::Data::Reader::getUnary() const {
  KJ_IREQUIRE((which() == RPCServer::Table::Cell::Data::UNARY),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void RPCServer::Table::Cell::Data::Builder::getUnary() {
  KJ_IREQUIRE((which() == RPCServer::Table::Cell::Data::UNARY),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RPCServer::Table::Cell::Data::Builder::setUnary( ::capnp::Void value) {
  _builder.setDataField<RPCServer::Table::Cell::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RPCServer::Table::Cell::Data::UNARY);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RPCServer::Table::Cell::Data::Reader::isBinary() const {
  return which() == RPCServer::Table::Cell::Data::BINARY;
}
inline bool RPCServer::Table::Cell::Data::Builder::isBinary() {
  return which() == RPCServer::Table::Cell::Data::BINARY;
}
inline bool RPCServer::Table::Cell::Data::Reader::getBinary() const {
  KJ_IREQUIRE((which() == RPCServer::Table::Cell::Data::BINARY),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool RPCServer::Table::Cell::Data::Builder::getBinary() {
  KJ_IREQUIRE((which() == RPCServer::Table::Cell::Data::BINARY),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void RPCServer::Table::Cell::Data::Builder::setBinary(bool value) {
  _builder.setDataField<RPCServer::Table::Cell::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RPCServer::Table::Cell::Data::BINARY);
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool RPCServer::Table::Cell::Data::Reader::isShort() const {
  return which() == RPCServer::Table::Cell::Data::SHORT;
}
inline bool RPCServer::Table::Cell::Data::Builder::isShort() {
  return which() == RPCServer::Table::Cell::Data::SHORT;
}
inline  ::uint32_t RPCServer::Table::Cell::Data::Reader::getShort() const {
  KJ_IREQUIRE((which() == RPCServer::Table::Cell::Data::SHORT),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t RPCServer::Table::Cell::Data::Builder::getShort() {
  KJ_IREQUIRE((which() == RPCServer::Table::Cell::Data::SHORT),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RPCServer::Table::Cell::Data::Builder::setShort( ::uint32_t value) {
  _builder.setDataField<RPCServer::Table::Cell::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RPCServer::Table::Cell::Data::SHORT);
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool RPCServer::Table::Cell::Data::Reader::isLong() const {
  return which() == RPCServer::Table::Cell::Data::LONG;
}
inline bool RPCServer::Table::Cell::Data::Builder::isLong() {
  return which() == RPCServer::Table::Cell::Data::LONG;
}
inline  ::uint64_t RPCServer::Table::Cell::Data::Reader::getLong() const {
  KJ_IREQUIRE((which() == RPCServer::Table::Cell::Data::LONG),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RPCServer::Table::Cell::Data::Builder::getLong() {
  KJ_IREQUIRE((which() == RPCServer::Table::Cell::Data::LONG),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RPCServer::Table::Cell::Data::Builder::setLong( ::uint64_t value) {
  _builder.setDataField<RPCServer::Table::Cell::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RPCServer::Table::Cell::Data::LONG);
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool RPCServer::Table::Cell::Data::Reader::isText() const {
  return which() == RPCServer::Table::Cell::Data::TEXT;
}
inline bool RPCServer::Table::Cell::Data::Builder::isText() {
  return which() == RPCServer::Table::Cell::Data::TEXT;
}
inline bool RPCServer::Table::Cell::Data::Reader::hasText() const {
  if (which() != RPCServer::Table::Cell::Data::TEXT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RPCServer::Table::Cell::Data::Builder::hasText() {
  if (which() != RPCServer::Table::Cell::Data::TEXT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RPCServer::Table::Cell::Data::Reader::getText() const {
  KJ_IREQUIRE((which() == RPCServer::Table::Cell::Data::TEXT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RPCServer::Table::Cell::Data::Builder::getText() {
  KJ_IREQUIRE((which() == RPCServer::Table::Cell::Data::TEXT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RPCServer::Table::Cell::Data::Builder::setText( ::capnp::Text::Reader value) {
  _builder.setDataField<RPCServer::Table::Cell::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RPCServer::Table::Cell::Data::TEXT);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RPCServer::Table::Cell::Data::Builder::initText(unsigned int size) {
  _builder.setDataField<RPCServer::Table::Cell::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RPCServer::Table::Cell::Data::TEXT);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RPCServer::Table::Cell::Data::Builder::adoptText(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<RPCServer::Table::Cell::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RPCServer::Table::Cell::Data::TEXT);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RPCServer::Table::Cell::Data::Builder::disownText() {
  KJ_IREQUIRE((which() == RPCServer::Table::Cell::Data::TEXT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline typename RPCServer::Response::Data::Reader RPCServer::Response::Reader::getData() const {
  return typename RPCServer::Response::Data::Reader(_reader);
}
inline typename RPCServer::Response::Data::Builder RPCServer::Response::Builder::getData() {
  return typename RPCServer::Response::Data::Builder(_builder);
}
#if !CAPNP_LITE
inline typename RPCServer::Response::Data::Pipeline RPCServer::Response::Pipeline::getData() {
  return typename RPCServer::Response::Data::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename RPCServer::Response::Data::Builder RPCServer::Response::Builder::initData() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  return typename RPCServer::Response::Data::Builder(_builder);
}
inline  ::RPCServer::Response::Data::Which RPCServer::Response::Data::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::RPCServer::Response::Data::Which RPCServer::Response::Data::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool RPCServer::Response::Data::Reader::isVoid() const {
  return which() == RPCServer::Response::Data::VOID;
}
inline bool RPCServer::Response::Data::Builder::isVoid() {
  return which() == RPCServer::Response::Data::VOID;
}
inline  ::capnp::Void RPCServer::Response::Data::Reader::getVoid() const {
  KJ_IREQUIRE((which() == RPCServer::Response::Data::VOID),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void RPCServer::Response::Data::Builder::getVoid() {
  KJ_IREQUIRE((which() == RPCServer::Response::Data::VOID),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RPCServer::Response::Data::Builder::setVoid( ::capnp::Void value) {
  _builder.setDataField<RPCServer::Response::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RPCServer::Response::Data::VOID);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RPCServer::Response::Data::Reader::isTable() const {
  return which() == RPCServer::Response::Data::TABLE;
}
inline bool RPCServer::Response::Data::Builder::isTable() {
  return which() == RPCServer::Response::Data::TABLE;
}
inline bool RPCServer::Response::Data::Reader::hasTable() const {
  if (which() != RPCServer::Response::Data::TABLE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RPCServer::Response::Data::Builder::hasTable() {
  if (which() != RPCServer::Response::Data::TABLE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::RPCServer::Table::Reader RPCServer::Response::Data::Reader::getTable() const {
  KJ_IREQUIRE((which() == RPCServer::Response::Data::TABLE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::RPCServer::Table>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::RPCServer::Table::Builder RPCServer::Response::Data::Builder::getTable() {
  KJ_IREQUIRE((which() == RPCServer::Response::Data::TABLE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::RPCServer::Table>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RPCServer::Response::Data::Builder::setTable( ::RPCServer::Table::Reader value) {
  _builder.setDataField<RPCServer::Response::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RPCServer::Response::Data::TABLE);
  ::capnp::_::PointerHelpers< ::RPCServer::Table>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::RPCServer::Table::Builder RPCServer::Response::Data::Builder::initTable() {
  _builder.setDataField<RPCServer::Response::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RPCServer::Response::Data::TABLE);
  return ::capnp::_::PointerHelpers< ::RPCServer::Table>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RPCServer::Response::Data::Builder::adoptTable(
    ::capnp::Orphan< ::RPCServer::Table>&& value) {
  _builder.setDataField<RPCServer::Response::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RPCServer::Response::Data::TABLE);
  ::capnp::_::PointerHelpers< ::RPCServer::Table>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::RPCServer::Table> RPCServer::Response::Data::Builder::disownTable() {
  KJ_IREQUIRE((which() == RPCServer::Response::Data::TABLE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::RPCServer::Table>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RPCServer::SendQueryParams::Reader::hasQuery() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RPCServer::SendQueryParams::Builder::hasQuery() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RPCServer::SendQueryParams::Reader::getQuery() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RPCServer::SendQueryParams::Builder::getQuery() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RPCServer::SendQueryParams::Builder::setQuery( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RPCServer::SendQueryParams::Builder::initQuery(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RPCServer::SendQueryParams::Builder::adoptQuery(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RPCServer::SendQueryParams::Builder::disownQuery() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RPCServer::SendQueryResults::Reader::hasResponse() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RPCServer::SendQueryResults::Builder::hasResponse() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::RPCServer::Response::Reader RPCServer::SendQueryResults::Reader::getResponse() const {
  return ::capnp::_::PointerHelpers< ::RPCServer::Response>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::RPCServer::Response::Builder RPCServer::SendQueryResults::Builder::getResponse() {
  return ::capnp::_::PointerHelpers< ::RPCServer::Response>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::RPCServer::Response::Pipeline RPCServer::SendQueryResults::Pipeline::getResponse() {
  return  ::RPCServer::Response::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void RPCServer::SendQueryResults::Builder::setResponse( ::RPCServer::Response::Reader value) {
  ::capnp::_::PointerHelpers< ::RPCServer::Response>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::RPCServer::Response::Builder RPCServer::SendQueryResults::Builder::initResponse() {
  return ::capnp::_::PointerHelpers< ::RPCServer::Response>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RPCServer::SendQueryResults::Builder::adoptResponse(
    ::capnp::Orphan< ::RPCServer::Response>&& value) {
  ::capnp::_::PointerHelpers< ::RPCServer::Response>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::RPCServer::Response> RPCServer::SendQueryResults::Builder::disownResponse() {
  return ::capnp::_::PointerHelpers< ::RPCServer::Response>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}


